//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 40 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BaseGreen`.
    static let baseGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "BaseGreen")
    /// Color `BaseSeparator`.
    static let baseSeparator = Rswift.ColorResource(bundle: R.hostingBundle, name: "BaseSeparator")
    /// Color `Blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Blue")
    /// Color `ButtonBackground-Cancel`.
    static let buttonBackgroundCancel = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBackground-Cancel")
    /// Color `ButtonBackground-Primary`.
    static let buttonBackgroundPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBackground-Primary")
    /// Color `ButtonBackground-Secondary`.
    static let buttonBackgroundSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBackground-Secondary")
    /// Color `ButtonBackground-Warn`.
    static let buttonBackgroundWarn = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBackground-Warn")
    /// Color `ButtonBorder-Cancel`.
    static let buttonBorderCancel = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBorder-Cancel")
    /// Color `ButtonBorder-Primary`.
    static let buttonBorderPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBorder-Primary")
    /// Color `ButtonBorder-Secondary`.
    static let buttonBorderSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBorder-Secondary")
    /// Color `ButtonBorder-Warn`.
    static let buttonBorderWarn = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBorder-Warn")
    /// Color `ButtonIconBase`.
    static let buttonIconBase = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonIconBase")
    /// Color `ButtonText-Cancel`.
    static let buttonTextCancel = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonText-Cancel")
    /// Color `ButtonText-Primary`.
    static let buttonTextPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonText-Primary")
    /// Color `ButtonText-Secondary`.
    static let buttonTextSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonText-Secondary")
    /// Color `FourthBackground`.
    static let fourthBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "FourthBackground")
    /// Color `LabelBackground-Attention`.
    static let labelBackgroundAttention = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelBackground-Attention")
    /// Color `LabelBackground-Default`.
    static let labelBackgroundDefault = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelBackground-Default")
    /// Color `LabelBackground-Error`.
    static let labelBackgroundError = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelBackground-Error")
    /// Color `LabelBackground-Primary`.
    static let labelBackgroundPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelBackground-Primary")
    /// Color `LabelBackground-Success`.
    static let labelBackgroundSuccess = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelBackground-Success")
    /// Color `LabelText-Attention`.
    static let labelTextAttention = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelText-Attention")
    /// Color `LabelText-Primary`.
    static let labelTextPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelText-Primary")
    /// Color `LabelText-Success`.
    static let labelTextSuccess = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelText-Success")
    /// Color `MainBackground`.
    static let mainBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBackground")
    /// Color `RedText`.
    static let redText = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedText")
    /// Color `SecondaryBackground`.
    static let secondaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackground")
    /// Color `SecondaryText`.
    static let secondaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryText")
    /// Color `ShadowColor`.
    static let shadowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ShadowColor")
    /// Color `Text-Warn`.
    static let textWarn = Rswift.ColorResource(bundle: R.hostingBundle, name: "Text-Warn")
    /// Color `TextBase`.
    static let textBase = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBase")
    /// Color `TextFieldBackground`.
    static let textFieldBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBackground")
    /// Color `TextFieldBorder`.
    static let textFieldBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBorder")
    /// Color `ThirdBackground`.
    static let thirdBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThirdBackground")
    /// Color `WhiteSeparator`.
    static let whiteSeparator = Rswift.ColorResource(bundle: R.hostingBundle, name: "WhiteSeparator")
    /// Color `White`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "White")
    /// Color `Yellow-200`.
    static let yellow200 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Yellow-200")
    /// Color `Yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Yellow")
    /// Color `black`.
    static let black = Rswift.ColorResource(bundle: R.hostingBundle, name: "black")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BaseGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func baseGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.baseGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BaseSeparator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func baseSeparator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.baseSeparator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBackground-Cancel", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBackgroundCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBackgroundCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBackground-Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBackgroundPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBackgroundPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBackground-Secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBackgroundSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBackgroundSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBackground-Warn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBackgroundWarn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBackgroundWarn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBorder-Cancel", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBorderCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBorderCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBorder-Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBorderPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBorderPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBorder-Secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBorderSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBorderSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBorder-Warn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBorderWarn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBorderWarn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonIconBase", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonIconBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonIconBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonText-Cancel", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonTextCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonTextCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonText-Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonTextPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonTextPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonText-Secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonTextSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonTextSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FourthBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fourthBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fourthBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelBackground-Attention", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelBackgroundAttention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelBackgroundAttention, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelBackground-Default", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelBackgroundDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelBackgroundDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelBackground-Error", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelBackgroundError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelBackgroundError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelBackground-Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelBackgroundPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelBackgroundPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelBackground-Success", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelBackgroundSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelBackgroundSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelText-Attention", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelTextAttention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelTextAttention, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelText-Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelTextPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelTextPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelText-Success", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelTextSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelTextSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ShadowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Text-Warn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textWarn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textWarn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextBase", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThirdBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thirdBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thirdBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "White", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WhiteSeparator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteSeparator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteSeparator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Yellow-200", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BaseGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func baseGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.baseGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BaseSeparator", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func baseSeparator(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.baseSeparator.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBackground-Cancel", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBackgroundCancel(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBackgroundCancel.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBackground-Primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBackgroundPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBackgroundPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBackground-Secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBackgroundSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBackgroundSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBackground-Warn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBackgroundWarn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBackgroundWarn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBorder-Cancel", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBorderCancel(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBorderCancel.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBorder-Primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBorderPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBorderPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBorder-Secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBorderSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBorderSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBorder-Warn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBorderWarn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBorderWarn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonIconBase", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonIconBase(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonIconBase.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonText-Cancel", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonTextCancel(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonTextCancel.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonText-Primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonTextPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonTextPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonText-Secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonTextSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonTextSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "FourthBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fourthBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fourthBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelBackground-Attention", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelBackgroundAttention(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelBackgroundAttention.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelBackground-Default", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelBackgroundDefault(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelBackgroundDefault.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelBackground-Error", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelBackgroundError(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelBackgroundError.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelBackground-Primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelBackgroundPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelBackgroundPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelBackground-Success", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelBackgroundSuccess(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelBackgroundSuccess.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelText-Attention", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelTextAttention(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelTextAttention.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelText-Primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelTextPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelTextPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelText-Success", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelTextSuccess(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelTextSuccess.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ShadowColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Text-Warn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textWarn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textWarn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextBase", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBase(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBase.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThirdBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func thirdBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.thirdBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "White", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "WhiteSeparator", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteSeparator(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteSeparator.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Yellow-200", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow200(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow200.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `ContractusLogo`.
    static let contractusLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ContractusLogo")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `NONE-CoinLogo`.
    static let noneCoinLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "NONE-CoinLogo")
    /// Image `Plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus")
    /// Image `SOL-CoinLogo`.
    static let solCoinLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "SOL-CoinLogo")
    /// Image `USDC-CoinLogo`.
    static let usdcCoinLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "USDC-CoinLogo")
    /// Image `solana`.
    static let solana = Rswift.ImageResource(bundle: R.hostingBundle, name: "solana")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ContractusLogo", bundle: ..., traitCollection: ...)`
    static func contractusLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contractusLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NONE-CoinLogo", bundle: ..., traitCollection: ...)`
    static func noneCoinLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneCoinLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SOL-CoinLogo", bundle: ..., traitCollection: ...)`
    static func solCoinLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solCoinLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "USDC-CoinLogo", bundle: ..., traitCollection: ...)`
    static func usdcCoinLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usdcCoinLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "solana", bundle: ..., traitCollection: ...)`
    static func solana(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solana, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 189 localization keys.
    struct localizable {
      /// en translation: -
      ///
      /// Locales: en
      static let dealStatusUnknown = Rswift.StringResource(key: "deal.status.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: A new way to collaborate and make business with partners. Create contract, sign, check result and pay. Securely.
      ///
      /// Locales: en
      static let enterMessage = Rswift.StringResource(key: "enter.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Account
      ///
      /// Locales: en
      static let commonAccount = Rswift.StringResource(key: "common.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Account must be %@ blockchain
      ///
      /// Locales: en
      static let addContractorSubtitleChecker = Rswift.StringResource(key: "addContractor.subtitle.checker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Account must be %@ blockchain
      ///
      /// Locales: en
      static let addContractorSubtitleContractor = Rswift.StringResource(key: "addContractor.subtitle.contractor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Accounts
      ///
      /// Locales: en
      static let accountsTitle = Rswift.StringResource(key: "accounts.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Active - %@
      ///
      /// Locales: en
      static let mainTitleActiveContracts = Rswift.StringResource(key: "main.title.active-contracts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Active deals
      ///
      /// Locales: en
      static let mainTitleDeals = Rswift.StringResource(key: "main.title.deals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en
      static let commonAdd = Rswift.StringResource(key: "common.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add account
      ///
      /// Locales: en
      static let accountsAdd = Rswift.StringResource(key: "accounts.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add checker
      ///
      /// Locales: en
      static let addContractorTitleChecker = Rswift.StringResource(key: "addContractor.title.checker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add partner
      ///
      /// Locales: en
      static let addContractorTitleContractor = Rswift.StringResource(key: "addContractor.title.contractor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After signing, the transaction will start executing
      ///
      /// Locales: en
      static let transactionSignSubtitleCommon = Rswift.StringResource(key: "transactionSign.subtitle.common", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After this Account checks the result of the contract, you get paid.
      ///
      /// Locales: en
      static let dealHintYouExecutor = Rswift.StringResource(key: "deal.hint.you-executor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After verification by this Account of the result of the contract, the partner receives payment.
      ///
      /// Locales: en
      static let dealHintVerifier = Rswift.StringResource(key: "deal.hint.verifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After you check the result of the contract, the contractor receives payment.
      ///
      /// Locales: en
      static let dealHintYouVerifier = Rswift.StringResource(key: "deal.hint.you-verifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en
      static let changeAmountAmount = Rswift.StringResource(key: "changeAmount.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en
      static let transactionSignFieldsAmount = Rswift.StringResource(key: "transactionSign.fields.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Amount of deal
      ///
      /// Locales: en
      static let changeAmountDealAmount = Rswift.StringResource(key: "changeAmount.deal-amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Amount of deal
      ///
      /// Locales: en
      static let dealViewAmount = Rswift.StringResource(key: "deal.view.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure you want to cancel sign?
      ///
      /// Locales: en
      static let dealCancelSignTitle = Rswift.StringResource(key: "deal.cancel.sign.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Attached files
      ///
      /// Locales: en
      static let dealViewContractFiles = Rswift.StringResource(key: "deal.view.contract-files", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Attention
      ///
      /// Locales: en
      static let commonAttention = Rswift.StringResource(key: "common.attention", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Backup
      ///
      /// Locales: en
      static let commonBackup = Rswift.StringResource(key: "common.backup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Base64
      ///
      /// Locales: en
      static let transactionSignFieldsBase64 = Rswift.StringResource(key: "transactionSign.fields.base64", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Before delete account backup private key.
      ///
      /// Locales: en
      static let accountsWarningSubtitle = Rswift.StringResource(key: "accounts.warning.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en
      static let uploadFileButtonCamera = Rswift.StringResource(key: "uploadFile.button.camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let commonCancel = Rswift.StringResource(key: "common.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let dealStatusCanceled = Rswift.StringResource(key: "deal.status.canceled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel deal
      ///
      /// Locales: en
      static let transactionTypeCancelDeal = Rswift.StringResource(key: "transaction.type.cancel-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel sign
      ///
      /// Locales: en
      static let dealButtonsCancelSign = Rswift.StringResource(key: "deal.buttons.cancel-sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel sign
      ///
      /// Locales: en
      static let dealCancelSign = Rswift.StringResource(key: "deal.cancel.sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change
      ///
      /// Locales: en
      static let commonChange = Rswift.StringResource(key: "common.change", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change amount
      ///
      /// Locales: en
      static let changeAmountTitle = Rswift.StringResource(key: "changeAmount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change amount
      ///
      /// Locales: en
      static let dealViewButtonChangeAmount = Rswift.StringResource(key: "deal.view.button.change-amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Check private key is backuped. If lose private key you can't use service forever.
      ///
      /// Locales: en
      static let backupInformationSubtitle = Rswift.StringResource(key: "backupInformation.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Checker
      ///
      /// Locales: en
      static let dealTextChecker = Rswift.StringResource(key: "deal.text.checker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Checker success added!
      ///
      /// Locales: en
      static let addContractorSuccessTitleChecker = Rswift.StringResource(key: "addContractor.success-title.checker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose your role
      ///
      /// Locales: en
      static let newDealSubtitle = Rswift.StringResource(key: "newDeal.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Client
      ///
      /// Locales: en
      static let dealTextClient = Rswift.StringResource(key: "deal.text.client", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Client
      ///
      /// Locales: en
      static let newDealTitleClient = Rswift.StringResource(key: "newDeal.title.client", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en
      static let commonClose = Rswift.StringResource(key: "common.close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Confirm and sign
      ///
      /// Locales: en
      static let transactionSignButtonsSign = Rswift.StringResource(key: "transactionSign.buttons.sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Content
      ///
      /// Locales: en
      static let dealViewContractText = Rswift.StringResource(key: "deal.view.contract-text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en
      static let backupInformationButtonContinue = Rswift.StringResource(key: "backupInformation.button.continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Contractus
      ///
      /// Locales: en
      static let commonAppName = Rswift.StringResource(key: "common.app-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copy
      ///
      /// Locales: en
      static let commonCopy = Rswift.StringResource(key: "common.copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copy the private key and save it in the password manager or in another safe place
      ///
      /// Locales: en
      static let accountsBackupSubtitle = Rswift.StringResource(key: "accounts.backup.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copy the private key and save it in the password manager or in another safe place
      ///
      /// Locales: en
      static let accountsDeleteSubtitle = Rswift.StringResource(key: "accounts.delete.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cost of verification
      ///
      /// Locales: en
      static let changeAmountVerificationAmount = Rswift.StringResource(key: "changeAmount.verification-amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create
      ///
      /// Locales: en
      static let commonCreate = Rswift.StringResource(key: "common.create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create new wallet
      ///
      /// Locales: en
      static let enterButtonCreateWallet = Rswift.StringResource(key: "enter.button.create-wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: en
      static let dealChangeAmountCurrency = Rswift.StringResource(key: "deal.changeAmount.currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Deal
      ///
      /// Locales: en
      static let commonDeal = Rswift.StringResource(key: "common.deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete account
      ///
      /// Locales: en
      static let accountsDeleteAccount = Rswift.StringResource(key: "accounts.delete.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en
      static let dealDetails = Rswift.StringResource(key: "deal.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en
      static let dealTextDetails = Rswift.StringResource(key: "deal.text.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Documents
      ///
      /// Locales: en
      static let dealViewDocuments = Rswift.StringResource(key: "deal.view.documents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let commonDone = Rswift.StringResource(key: "common.done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let dealStatusFinished = Rswift.StringResource(key: "deal.status.finished", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let transactionSignStatusesDone = Rswift.StringResource(key: "transactionSign.statuses.done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en
      static let commonEdit = Rswift.StringResource(key: "common.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en
      static let dealTextEditorModeEditor = Rswift.StringResource(key: "deal.textEditor.mode.editor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Empty
      ///
      /// Locales: en
      static let commonEmpty = Rswift.StringResource(key: "common.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Encrypt and upload
      ///
      /// Locales: en
      static let uploadFileStateUploadFile = Rswift.StringResource(key: "uploadFile.state.upload-file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Encrypted
      ///
      /// Locales: en
      static let commonEncrypted = Rswift.StringResource(key: "common.encrypted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Encrypted
      ///
      /// Locales: en
      static let dealViewEncrypted = Rswift.StringResource(key: "deal.view.encrypted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Encrypting...
      ///
      /// Locales: en
      static let uploadFileStateEncrypting = Rswift.StringResource(key: "uploadFile.state.encrypting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter amount
      ///
      /// Locales: en
      static let dealChangeAmountPlaceholder = Rswift.StringResource(key: "deal.changeAmount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter contract description
      ///
      /// Locales: en
      static let dealTextEditorEditorPlaceholder = Rswift.StringResource(key: "deal.textEditor.editor-placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let commonError = Rswift.StringResource(key: "common.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let transactionSignStatusesError = Rswift.StringResource(key: "transactionSign.statuses.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Estimate balance
      ///
      /// Locales: en
      static let balanceEstimate = Rswift.StringResource(key: "balance.estimate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Executor
      ///
      /// Locales: en
      static let dealTextExecutor = Rswift.StringResource(key: "deal.text.executor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Executor
      ///
      /// Locales: en
      static let newDealTitleExecutor = Rswift.StringResource(key: "newDeal.title.executor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Executor
      ///
      /// Locales: en
      static let transactionSignFieldsExecutor = Rswift.StringResource(key: "transactionSign.fields.executor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Executor can publish documents for approve
      ///
      /// Locales: en
      static let dealResultsHint = Rswift.StringResource(key: "deal.results.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fee
      ///
      /// Locales: en
      static let transactionSignFieldsFee = Rswift.StringResource(key: "transactionSign.fields.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: File
      ///
      /// Locales: en
      static let commonFile = Rswift.StringResource(key: "common.file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: File
      ///
      /// Locales: en
      static let uploadFileButtonFile = Rswift.StringResource(key: "uploadFile.button.file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Files
      ///
      /// Locales: en
      static let dealTextFiles = Rswift.StringResource(key: "deal.text.files", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Finish deal
      ///
      /// Locales: en
      static let dealButtonsFinishDeal = Rswift.StringResource(key: "deal.buttons.finish-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Finish deal
      ///
      /// Locales: en
      static let transactionTypeFinishDeal = Rswift.StringResource(key: "transaction.type.finish-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: For client
      ///
      /// Locales: en
      static let dealTextForClient = Rswift.StringResource(key: "deal.text.for.client", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Force update
      ///
      /// Locales: en
      static let dealTextEditorForceUpdate = Rswift.StringResource(key: "deal.textEditor.force-update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Free
      ///
      /// Locales: en
      static let changeAmountFeeFree = Rswift.StringResource(key: "changeAmount.fee-free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Free
      ///
      /// Locales: en
      static let transactionSignFieldsFreeFee = Rswift.StringResource(key: "transactionSign.fields.free-fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en
      static let uploadFileButtonSelectGallery = Rswift.StringResource(key: "uploadFile.button.select-gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: If all the work is done as specified in the contract you can complete the contract, the contractor will receive payment. The checker will receive a commission for services.
      ///
      /// Locales: en
      static let dealDescriptionCommandFinishDeal = Rswift.StringResource(key: "deal.description-command.finish-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: If you already backuped then press Continues
      ///
      /// Locales: en
      static let backupInformationTooltip = Rswift.StringResource(key: "backupInformation.tooltip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: If you pay to some service or product
      ///
      /// Locales: en
      static let newDealSubtitleClient = Rswift.StringResource(key: "newDeal.subtitle.client", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: If you provide service or sell goods
      ///
      /// Locales: en
      static let newDealSubtitleExecutor = Rswift.StringResource(key: "newDeal.subtitle.executor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import
      ///
      /// Locales: en
      static let commonImport = Rswift.StringResource(key: "common.import", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Import exists
      ///
      /// Locales: en
      static let enterButtonImport = Rswift.StringResource(key: "enter.button.import", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: In work
      ///
      /// Locales: en
      static let dealStatusWorking = Rswift.StringResource(key: "deal.status.working", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: en
      static let transactionSignButtonsLoading = Rswift.StringResource(key: "transactionSign.buttons.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New
      ///
      /// Locales: en
      static let dealStatusNew = Rswift.StringResource(key: "deal.status.new", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New deal
      ///
      /// Locales: en
      static let mainTitleNewDeal = Rswift.StringResource(key: "main.title.new-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New deal
      ///
      /// Locales: en
      static let newDealTitle = Rswift.StringResource(key: "newDeal.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let createWalletButtonNext = Rswift.StringResource(key: "createWallet.button.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No secret key
      ///
      /// Locales: en
      static let dealNoSecretKey = Rswift.StringResource(key: "deal.no-secret-key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Of transaction. Once signed by all parties, the client's funds will be locked in the smart-contract for the entire period of work.
      ///
      /// Locales: en
      static let transactionSignSubtitleUnsignedInitDeal = Rswift.StringResource(key: "transactionSign.subtitle.unsigned-init-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let commonOk = Rswift.StringResource(key: "common.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en
      static let commonOpen = Rswift.StringResource(key: "common.open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Owner
      ///
      /// Locales: en
      static let commonOwner = Rswift.StringResource(key: "common.owner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Owner
      ///
      /// Locales: en
      static let dealTextOwner = Rswift.StringResource(key: "deal.text.owner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Partner
      ///
      /// Locales: en
      static let dealTextPartner = Rswift.StringResource(key: "deal.text.partner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Partner success added!
      ///
      /// Locales: en
      static let addContractorSuccessTitleContractor = Rswift.StringResource(key: "addContractor.success-title.contractor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Paste
      ///
      /// Locales: en
      static let commonPaste = Rswift.StringResource(key: "common.paste", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: en
      static let dealStatusPending = Rswift.StringResource(key: "deal.status.pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pending signature
      ///
      /// Locales: en
      static let transactionSignStatusesNeedSign = Rswift.StringResource(key: "transactionSign.statuses.need-sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Performs the work specified in the contract.
      ///
      /// Locales: en
      static let dealHintAboutExecutor = Rswift.StringResource(key: "deal.hint.about-executor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please select another account before deleting the active account. Or after deleting you log out. Delete account?
      ///
      /// Locales: en
      static let accountsDeleteAlertSubtitle = Rswift.StringResource(key: "accounts.delete.alert.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Private key
      ///
      /// Locales: en
      static let accountsBackupTitle = Rswift.StringResource(key: "accounts.backup.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Private key
      ///
      /// Locales: en
      static let accountsEditPrivateKey = Rswift.StringResource(key: "accounts.edit.private.key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Private key already in clipboard!
      ///
      /// Locales: en
      static let backupInformationButtonCopied = Rswift.StringResource(key: "backupInformation.button.copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Private key copied!
      ///
      /// Locales: en
      static let createWalletButtonCopied = Rswift.StringResource(key: "createWallet.button.copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Processing
      ///
      /// Locales: en
      static let dealStatusProcessing = Rswift.StringResource(key: "deal.status.processing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Processing
      ///
      /// Locales: en
      static let transactionSignStatusesProcessing = Rswift.StringResource(key: "transactionSign.statuses.processing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Public key
      ///
      /// Locales: en
      static let commonPublicKey = Rswift.StringResource(key: "common.public-key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: en
      static let accountsEditRemove = Rswift.StringResource(key: "accounts.edit.remove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remove Account
      ///
      /// Locales: en
      static let accountsDeleteTitle = Rswift.StringResource(key: "accounts.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Results
      ///
      /// Locales: en
      static let dealResultsTitle = Rswift.StringResource(key: "deal.results.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: en
      static let uploadFileButtonRetry = Rswift.StringResource(key: "uploadFile.button.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SOL ➞ wSOL
      ///
      /// Locales: en
      static let transactionTypeWrapSol = Rswift.StringResource(key: "transaction.type.wrap-sol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let commonSave = Rswift.StringResource(key: "common.save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Saved
      ///
      /// Locales: en
      static let uploadFileStateSaved = Rswift.StringResource(key: "uploadFile.state.saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Saving...
      ///
      /// Locales: en
      static let uploadFileStateSaving = Rswift.StringResource(key: "uploadFile.state.saving", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en
      static let uploadFileButtonSelect = Rswift.StringResource(key: "uploadFile.button.select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select action
      ///
      /// Locales: en
      static let commonSelectAction = Rswift.StringResource(key: "common.select-action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select file
      ///
      /// Locales: en
      static let uploadFileButtonImportFile = Rswift.StringResource(key: "uploadFile.button.import-file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send it securely via Telegram Secret Chat or Signal to your partner or allow scan from your phone.
      ///
      /// Locales: en
      static let qrCodeWarningMessage = Rswift.StringResource(key: "qrCode.warning.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Service Fee
      ///
      /// Locales: en
      static let transactionSignFieldsServiceFee = Rswift.StringResource(key: "transactionSign.fields.service-fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Service fee
      ///
      /// Locales: en
      static let changeAmountFeeTitle = Rswift.StringResource(key: "changeAmount.fee-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Set
      ///
      /// Locales: en
      static let commonSet = Rswift.StringResource(key: "common.set", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en
      static let commonShare = Rswift.StringResource(key: "common.share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Share Image
      ///
      /// Locales: en
      static let qrCodeButtonShare = Rswift.StringResource(key: "qrCode.button.share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign
      ///
      /// Locales: en
      static let dealButtonsSign = Rswift.StringResource(key: "deal.buttons.sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign and start
      ///
      /// Locales: en
      static let dealButtonsSignAndStart = Rswift.StringResource(key: "deal.buttons.sign-and-start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign the contract, the work of the contract starts automatically when your partner signs it
      ///
      /// Locales: en
      static let dealDescriptionCommandFirstSign = Rswift.StringResource(key: "deal.description-command.first-sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Signature
      ///
      /// Locales: en
      static let transactionSignFieldsSignature = Rswift.StringResource(key: "transactionSign.fields.signature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Signed
      ///
      /// Locales: en
      static let transactionSignButtonsSigned = Rswift.StringResource(key: "transactionSign.buttons.signed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Signed
      ///
      /// Locales: en
      static let transactionSignTitleSigned = Rswift.StringResource(key: "transactionSign.title.signed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Signing  the transaction
      ///
      /// Locales: en
      static let transactionSignTitleNeedSign = Rswift.StringResource(key: "transactionSign.title.need-sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Signing...
      ///
      /// Locales: en
      static let transactionSignButtonsSigning = Rswift.StringResource(key: "transactionSign.buttons.signing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start deal
      ///
      /// Locales: en
      static let transactionTypeInitDeal = Rswift.StringResource(key: "transaction.type.init-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en
      static let transactionSignFieldsStatus = Rswift.StringResource(key: "transactionSign.fields.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stop deal
      ///
      /// Locales: en
      static let dealButtonsStopDeal = Rswift.StringResource(key: "deal.buttons.stop-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Success upload
      ///
      /// Locales: en
      static let uploadFileStateSuccess = Rswift.StringResource(key: "uploadFile.state.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Text
      ///
      /// Locales: en
      static let dealTextText = Rswift.StringResource(key: "deal.text.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The account that pays you for the work you do
      ///
      /// Locales: en
      static let dealHintPayAccount = Rswift.StringResource(key: "deal.hint.pay-account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The contract description was updated while you were editing your version. Forced update to your version?
      ///
      /// Locales: en
      static let dealTextEditorMessageForceUpdate = Rswift.StringResource(key: "deal.textEditor.message-force-update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The description of the contract is empty
      ///
      /// Locales: en
      static let dealTextEditorViewPlaceholder = Rswift.StringResource(key: "deal.textEditor.view-placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The fee is calculated from the amount of the transaction and the cost of the verification service of result
      ///
      /// Locales: en
      static let changeAmountFeeCalculateDescription = Rswift.StringResource(key: "changeAmount.fee-calculate-description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The fee is taken after the contract is signed by all parties and the start of the contract.
      ///
      /// Locales: en
      static let changeAmountFeeDescription = Rswift.StringResource(key: "changeAmount.fee-description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The file is large. Encryption may take a few minutes
      ///
      /// Locales: en
      static let uploadFileLargeFile = Rswift.StringResource(key: "uploadFile.large-file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The partner has already signed the contract. The work of the contract will begin when you sign the contract.
      ///
      /// Locales: en
      static let dealDescriptionCommandPartnerAlreadySigned = Rswift.StringResource(key: "deal.description-command.partner-already-signed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The partner need scan the QR code to start working on the contract.
      ///
      /// Locales: en
      static let shareContentSubtitleSecretKey = Rswift.StringResource(key: "shareContent.subtitle.secret-key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The secret key
      ///
      /// Locales: en
      static let shareContentTitleSecretKey = Rswift.StringResource(key: "shareContent.title.secret-key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The secret key is needed to view and decrypt/encrypt contract details.
      ///
      /// Locales: en
      static let dealNoSecretKeyInformation = Rswift.StringResource(key: "deal.no-secret-key-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The transaction will soon be completed
      ///
      /// Locales: en
      static let transactionSignSubtitleProcessing = Rswift.StringResource(key: "transactionSign.subtitle.processing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This files will be encrypted and available for viewing only to contract partners.
      ///
      /// Locales: en
      static let dealHintEncryptFiles = Rswift.StringResource(key: "deal.hint.encrypt-files", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This key use for work with service. Please, backup private key to secure store.
      ///
      /// Locales: en
      static let createWalletSubtitle = Rswift.StringResource(key: "createWallet.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This text will be encrypted and available for viewing only to contract partners.
      ///
      /// Locales: en
      static let dealHintEncryptContent = Rswift.StringResource(key: "deal.hint.encrypt-content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Total amount
      ///
      /// Locales: en
      static let changeAmountTotalAmount = Rswift.StringResource(key: "changeAmount.total-amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transaction
      ///
      /// Locales: en
      static let transactionSignFieldsTx = Rswift.StringResource(key: "transactionSign.fields.tx", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Type
      ///
      /// Locales: en
      static let transactionSignFieldsType = Rswift.StringResource(key: "transactionSign.fields.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en
      static let commonUpdate = Rswift.StringResource(key: "common.update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Upload error
      ///
      /// Locales: en
      static let uploadFileStateError = Rswift.StringResource(key: "uploadFile.state.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Uploading - %@
      ///
      /// Locales: en
      static let uploadFileStateUploading = Rswift.StringResource(key: "uploadFile.state.uploading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Verifier
      ///
      /// Locales: en
      static let dealTextVerifier = Rswift.StringResource(key: "deal.text.verifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Verifier Fee
      ///
      /// Locales: en
      static let transactionSignFieldsVerifierFee = Rswift.StringResource(key: "transactionSign.fields.verifier-fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Very important!
      ///
      /// Locales: en
      static let backupInformationTitle = Rswift.StringResource(key: "backupInformation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View
      ///
      /// Locales: en
      static let commonView = Rswift.StringResource(key: "common.view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View
      ///
      /// Locales: en
      static let dealTextEditorModeViewer = Rswift.StringResource(key: "deal.textEditor.mode.viewer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Waiting approve
      ///
      /// Locales: en
      static let dealResultsWaitingApprove = Rswift.StringResource(key: "deal.results.waiting-approve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en
      static let accountsDeleteAlertTitle = Rswift.StringResource(key: "accounts.delete.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en
      static let commonWarning = Rswift.StringResource(key: "common.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Warning!
      ///
      /// Locales: en
      static let accountsWarningTitle = Rswift.StringResource(key: "accounts.warning.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Warning!
      ///
      /// Locales: en
      static let qrCodeWarning = Rswift.StringResource(key: "qrCode.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes, delete
      ///
      /// Locales: en
      static let accountsDeleteAlertButton = Rswift.StringResource(key: "accounts.delete.alert.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You
      ///
      /// Locales: en
      static let commonYou = Rswift.StringResource(key: "common.you", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You can cancel your signature before your partner signs the contract. The work of the contract will begin when the partner signs.
      ///
      /// Locales: en
      static let dealDescriptionCommandCancelSign = Rswift.StringResource(key: "deal.description-command.cancel-sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You can stop the contract all funds will be refunded.
      ///
      /// Locales: en
      static let dealDescriptionCommandStopDeal = Rswift.StringResource(key: "deal.description-command.stop-deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You cannot recover access to the account without the private key.
      ///
      /// Locales: en
      static let accountsDeleteWarning = Rswift.StringResource(key: "accounts.delete.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You need to specify the Account that will check the result of the contract.
      ///
      /// Locales: en
      static let dealHintEmptyVerifier = Rswift.StringResource(key: "deal.hint.empty-verifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your private key
      ///
      /// Locales: en
      static let createWalletTitle = Rswift.StringResource(key: "createWallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: [No file name]
      ///
      /// Locales: en
      static let dealFileNoName = Rswift.StringResource(key: "deal.file.no-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: wSOL ➞ SOL
      ///
      /// Locales: en
      static let transactionTypeUnwrapWsol = Rswift.StringResource(key: "transaction.type.unwrap-wsol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: -
      ///
      /// Locales: en
      static func dealStatusUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.unknown"
        }

        return NSLocalizedString("deal.status.unknown", bundle: bundle, comment: "")
      }

      /// en translation: A new way to collaborate and make business with partners. Create contract, sign, check result and pay. Securely.
      ///
      /// Locales: en
      static func enterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.message"
        }

        return NSLocalizedString("enter.message", bundle: bundle, comment: "")
      }

      /// en translation: Account
      ///
      /// Locales: en
      static func commonAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.account"
        }

        return NSLocalizedString("common.account", bundle: bundle, comment: "")
      }

      /// en translation: Account must be %@ blockchain
      ///
      /// Locales: en
      static func addContractorSubtitleChecker(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addContractor.subtitle.checker", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addContractor.subtitle.checker"
        }

        let format = NSLocalizedString("addContractor.subtitle.checker", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Account must be %@ blockchain
      ///
      /// Locales: en
      static func addContractorSubtitleContractor(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addContractor.subtitle.contractor", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addContractor.subtitle.contractor"
        }

        let format = NSLocalizedString("addContractor.subtitle.contractor", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Accounts
      ///
      /// Locales: en
      static func accountsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.title"
        }

        return NSLocalizedString("accounts.title", bundle: bundle, comment: "")
      }

      /// en translation: Active - %@
      ///
      /// Locales: en
      static func mainTitleActiveContracts(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("main.title.active-contracts", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "main.title.active-contracts"
        }

        let format = NSLocalizedString("main.title.active-contracts", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Active deals
      ///
      /// Locales: en
      static func mainTitleDeals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("main.title.deals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "main.title.deals"
        }

        return NSLocalizedString("main.title.deals", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en
      static func commonAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.add"
        }

        return NSLocalizedString("common.add", bundle: bundle, comment: "")
      }

      /// en translation: Add account
      ///
      /// Locales: en
      static func accountsAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.add"
        }

        return NSLocalizedString("accounts.add", bundle: bundle, comment: "")
      }

      /// en translation: Add checker
      ///
      /// Locales: en
      static func addContractorTitleChecker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addContractor.title.checker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addContractor.title.checker"
        }

        return NSLocalizedString("addContractor.title.checker", bundle: bundle, comment: "")
      }

      /// en translation: Add partner
      ///
      /// Locales: en
      static func addContractorTitleContractor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addContractor.title.contractor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addContractor.title.contractor"
        }

        return NSLocalizedString("addContractor.title.contractor", bundle: bundle, comment: "")
      }

      /// en translation: After signing, the transaction will start executing
      ///
      /// Locales: en
      static func transactionSignSubtitleCommon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.subtitle.common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.subtitle.common"
        }

        return NSLocalizedString("transactionSign.subtitle.common", bundle: bundle, comment: "")
      }

      /// en translation: After this Account checks the result of the contract, you get paid.
      ///
      /// Locales: en
      static func dealHintYouExecutor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.you-executor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.you-executor"
        }

        return NSLocalizedString("deal.hint.you-executor", bundle: bundle, comment: "")
      }

      /// en translation: After verification by this Account of the result of the contract, the partner receives payment.
      ///
      /// Locales: en
      static func dealHintVerifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.verifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.verifier"
        }

        return NSLocalizedString("deal.hint.verifier", bundle: bundle, comment: "")
      }

      /// en translation: After you check the result of the contract, the contractor receives payment.
      ///
      /// Locales: en
      static func dealHintYouVerifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.you-verifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.you-verifier"
        }

        return NSLocalizedString("deal.hint.you-verifier", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en
      static func changeAmountAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.amount"
        }

        return NSLocalizedString("changeAmount.amount", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en
      static func transactionSignFieldsAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.amount"
        }

        return NSLocalizedString("transactionSign.fields.amount", bundle: bundle, comment: "")
      }

      /// en translation: Amount of deal
      ///
      /// Locales: en
      static func changeAmountDealAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.deal-amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.deal-amount"
        }

        return NSLocalizedString("changeAmount.deal-amount", bundle: bundle, comment: "")
      }

      /// en translation: Amount of deal
      ///
      /// Locales: en
      static func dealViewAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.view.amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.view.amount"
        }

        return NSLocalizedString("deal.view.amount", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to cancel sign?
      ///
      /// Locales: en
      static func dealCancelSignTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.cancel.sign.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.cancel.sign.title"
        }

        return NSLocalizedString("deal.cancel.sign.title", bundle: bundle, comment: "")
      }

      /// en translation: Attached files
      ///
      /// Locales: en
      static func dealViewContractFiles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.view.contract-files", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.view.contract-files"
        }

        return NSLocalizedString("deal.view.contract-files", bundle: bundle, comment: "")
      }

      /// en translation: Attention
      ///
      /// Locales: en
      static func commonAttention(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.attention", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.attention"
        }

        return NSLocalizedString("common.attention", bundle: bundle, comment: "")
      }

      /// en translation: Backup
      ///
      /// Locales: en
      static func commonBackup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.backup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.backup"
        }

        return NSLocalizedString("common.backup", bundle: bundle, comment: "")
      }

      /// en translation: Base64
      ///
      /// Locales: en
      static func transactionSignFieldsBase64(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.base64", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.base64"
        }

        return NSLocalizedString("transactionSign.fields.base64", bundle: bundle, comment: "")
      }

      /// en translation: Before delete account backup private key.
      ///
      /// Locales: en
      static func accountsWarningSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.warning.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.warning.subtitle"
        }

        return NSLocalizedString("accounts.warning.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en
      static func uploadFileButtonCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.button.camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.button.camera"
        }

        return NSLocalizedString("uploadFile.button.camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.cancel"
        }

        return NSLocalizedString("common.cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func dealStatusCanceled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.canceled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.canceled"
        }

        return NSLocalizedString("deal.status.canceled", bundle: bundle, comment: "")
      }

      /// en translation: Cancel deal
      ///
      /// Locales: en
      static func transactionTypeCancelDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.type.cancel-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.type.cancel-deal"
        }

        return NSLocalizedString("transaction.type.cancel-deal", bundle: bundle, comment: "")
      }

      /// en translation: Cancel sign
      ///
      /// Locales: en
      static func dealButtonsCancelSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.buttons.cancel-sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.buttons.cancel-sign"
        }

        return NSLocalizedString("deal.buttons.cancel-sign", bundle: bundle, comment: "")
      }

      /// en translation: Cancel sign
      ///
      /// Locales: en
      static func dealCancelSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.cancel.sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.cancel.sign"
        }

        return NSLocalizedString("deal.cancel.sign", bundle: bundle, comment: "")
      }

      /// en translation: Change
      ///
      /// Locales: en
      static func commonChange(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.change", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.change"
        }

        return NSLocalizedString("common.change", bundle: bundle, comment: "")
      }

      /// en translation: Change amount
      ///
      /// Locales: en
      static func changeAmountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.title"
        }

        return NSLocalizedString("changeAmount.title", bundle: bundle, comment: "")
      }

      /// en translation: Change amount
      ///
      /// Locales: en
      static func dealViewButtonChangeAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.view.button.change-amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.view.button.change-amount"
        }

        return NSLocalizedString("deal.view.button.change-amount", bundle: bundle, comment: "")
      }

      /// en translation: Check private key is backuped. If lose private key you can't use service forever.
      ///
      /// Locales: en
      static func backupInformationSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backupInformation.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backupInformation.subtitle"
        }

        return NSLocalizedString("backupInformation.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Checker
      ///
      /// Locales: en
      static func dealTextChecker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.checker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.checker"
        }

        return NSLocalizedString("deal.text.checker", bundle: bundle, comment: "")
      }

      /// en translation: Checker success added!
      ///
      /// Locales: en
      static func addContractorSuccessTitleChecker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addContractor.success-title.checker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addContractor.success-title.checker"
        }

        return NSLocalizedString("addContractor.success-title.checker", bundle: bundle, comment: "")
      }

      /// en translation: Choose your role
      ///
      /// Locales: en
      static func newDealSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newDeal.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newDeal.subtitle"
        }

        return NSLocalizedString("newDeal.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Client
      ///
      /// Locales: en
      static func dealTextClient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.client", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.client"
        }

        return NSLocalizedString("deal.text.client", bundle: bundle, comment: "")
      }

      /// en translation: Client
      ///
      /// Locales: en
      static func newDealTitleClient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newDeal.title.client", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newDeal.title.client"
        }

        return NSLocalizedString("newDeal.title.client", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en
      static func commonClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.close"
        }

        return NSLocalizedString("common.close", bundle: bundle, comment: "")
      }

      /// en translation: Confirm and sign
      ///
      /// Locales: en
      static func transactionSignButtonsSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.buttons.sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.buttons.sign"
        }

        return NSLocalizedString("transactionSign.buttons.sign", bundle: bundle, comment: "")
      }

      /// en translation: Content
      ///
      /// Locales: en
      static func dealViewContractText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.view.contract-text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.view.contract-text"
        }

        return NSLocalizedString("deal.view.contract-text", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en
      static func backupInformationButtonContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backupInformation.button.continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backupInformation.button.continue"
        }

        return NSLocalizedString("backupInformation.button.continue", bundle: bundle, comment: "")
      }

      /// en translation: Contractus
      ///
      /// Locales: en
      static func commonAppName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.app-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.app-name"
        }

        return NSLocalizedString("common.app-name", bundle: bundle, comment: "")
      }

      /// en translation: Copy
      ///
      /// Locales: en
      static func commonCopy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.copy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.copy"
        }

        return NSLocalizedString("common.copy", bundle: bundle, comment: "")
      }

      /// en translation: Copy the private key and save it in the password manager or in another safe place
      ///
      /// Locales: en
      static func accountsBackupSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.backup.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.backup.subtitle"
        }

        return NSLocalizedString("accounts.backup.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Copy the private key and save it in the password manager or in another safe place
      ///
      /// Locales: en
      static func accountsDeleteSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.subtitle"
        }

        return NSLocalizedString("accounts.delete.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Cost of verification
      ///
      /// Locales: en
      static func changeAmountVerificationAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.verification-amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.verification-amount"
        }

        return NSLocalizedString("changeAmount.verification-amount", bundle: bundle, comment: "")
      }

      /// en translation: Create
      ///
      /// Locales: en
      static func commonCreate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.create"
        }

        return NSLocalizedString("common.create", bundle: bundle, comment: "")
      }

      /// en translation: Create new wallet
      ///
      /// Locales: en
      static func enterButtonCreateWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.button.create-wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.button.create-wallet"
        }

        return NSLocalizedString("enter.button.create-wallet", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: en
      static func dealChangeAmountCurrency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.changeAmount.currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.changeAmount.currency"
        }

        return NSLocalizedString("deal.changeAmount.currency", bundle: bundle, comment: "")
      }

      /// en translation: Deal
      ///
      /// Locales: en
      static func commonDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.deal"
        }

        return NSLocalizedString("common.deal", bundle: bundle, comment: "")
      }

      /// en translation: Delete account
      ///
      /// Locales: en
      static func accountsDeleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.account"
        }

        return NSLocalizedString("accounts.delete.account", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en
      static func dealDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.details"
        }

        return NSLocalizedString("deal.details", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en
      static func dealTextDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.details"
        }

        return NSLocalizedString("deal.text.details", bundle: bundle, comment: "")
      }

      /// en translation: Documents
      ///
      /// Locales: en
      static func dealViewDocuments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.view.documents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.view.documents"
        }

        return NSLocalizedString("deal.view.documents", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func commonDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.done"
        }

        return NSLocalizedString("common.done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func dealStatusFinished(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.finished", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.finished"
        }

        return NSLocalizedString("deal.status.finished", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func transactionSignStatusesDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.statuses.done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.statuses.done"
        }

        return NSLocalizedString("transactionSign.statuses.done", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en
      static func commonEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.edit"
        }

        return NSLocalizedString("common.edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en
      static func dealTextEditorModeEditor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.textEditor.mode.editor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.textEditor.mode.editor"
        }

        return NSLocalizedString("deal.textEditor.mode.editor", bundle: bundle, comment: "")
      }

      /// en translation: Empty
      ///
      /// Locales: en
      static func commonEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.empty"
        }

        return NSLocalizedString("common.empty", bundle: bundle, comment: "")
      }

      /// en translation: Encrypt and upload
      ///
      /// Locales: en
      static func uploadFileStateUploadFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.state.upload-file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.upload-file"
        }

        return NSLocalizedString("uploadFile.state.upload-file", bundle: bundle, comment: "")
      }

      /// en translation: Encrypted
      ///
      /// Locales: en
      static func commonEncrypted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.encrypted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.encrypted"
        }

        return NSLocalizedString("common.encrypted", bundle: bundle, comment: "")
      }

      /// en translation: Encrypted
      ///
      /// Locales: en
      static func dealViewEncrypted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.view.encrypted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.view.encrypted"
        }

        return NSLocalizedString("deal.view.encrypted", bundle: bundle, comment: "")
      }

      /// en translation: Encrypting...
      ///
      /// Locales: en
      static func uploadFileStateEncrypting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.state.encrypting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.encrypting"
        }

        return NSLocalizedString("uploadFile.state.encrypting", bundle: bundle, comment: "")
      }

      /// en translation: Enter amount
      ///
      /// Locales: en
      static func dealChangeAmountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.changeAmount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.changeAmount.placeholder"
        }

        return NSLocalizedString("deal.changeAmount.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Enter contract description
      ///
      /// Locales: en
      static func dealTextEditorEditorPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.textEditor.editor-placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.textEditor.editor-placeholder"
        }

        return NSLocalizedString("deal.textEditor.editor-placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func commonError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.error"
        }

        return NSLocalizedString("common.error", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func transactionSignStatusesError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.statuses.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.statuses.error"
        }

        return NSLocalizedString("transactionSign.statuses.error", bundle: bundle, comment: "")
      }

      /// en translation: Estimate balance
      ///
      /// Locales: en
      static func balanceEstimate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("balance.estimate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "balance.estimate"
        }

        return NSLocalizedString("balance.estimate", bundle: bundle, comment: "")
      }

      /// en translation: Executor
      ///
      /// Locales: en
      static func dealTextExecutor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.executor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.executor"
        }

        return NSLocalizedString("deal.text.executor", bundle: bundle, comment: "")
      }

      /// en translation: Executor
      ///
      /// Locales: en
      static func newDealTitleExecutor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newDeal.title.executor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newDeal.title.executor"
        }

        return NSLocalizedString("newDeal.title.executor", bundle: bundle, comment: "")
      }

      /// en translation: Executor
      ///
      /// Locales: en
      static func transactionSignFieldsExecutor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.executor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.executor"
        }

        return NSLocalizedString("transactionSign.fields.executor", bundle: bundle, comment: "")
      }

      /// en translation: Executor can publish documents for approve
      ///
      /// Locales: en
      static func dealResultsHint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.results.hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.results.hint"
        }

        return NSLocalizedString("deal.results.hint", bundle: bundle, comment: "")
      }

      /// en translation: Fee
      ///
      /// Locales: en
      static func transactionSignFieldsFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.fee"
        }

        return NSLocalizedString("transactionSign.fields.fee", bundle: bundle, comment: "")
      }

      /// en translation: File
      ///
      /// Locales: en
      static func commonFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.file"
        }

        return NSLocalizedString("common.file", bundle: bundle, comment: "")
      }

      /// en translation: File
      ///
      /// Locales: en
      static func uploadFileButtonFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.button.file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.button.file"
        }

        return NSLocalizedString("uploadFile.button.file", bundle: bundle, comment: "")
      }

      /// en translation: Files
      ///
      /// Locales: en
      static func dealTextFiles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.files", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.files"
        }

        return NSLocalizedString("deal.text.files", bundle: bundle, comment: "")
      }

      /// en translation: Finish deal
      ///
      /// Locales: en
      static func dealButtonsFinishDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.buttons.finish-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.buttons.finish-deal"
        }

        return NSLocalizedString("deal.buttons.finish-deal", bundle: bundle, comment: "")
      }

      /// en translation: Finish deal
      ///
      /// Locales: en
      static func transactionTypeFinishDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.type.finish-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.type.finish-deal"
        }

        return NSLocalizedString("transaction.type.finish-deal", bundle: bundle, comment: "")
      }

      /// en translation: For client
      ///
      /// Locales: en
      static func dealTextForClient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.for.client", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.for.client"
        }

        return NSLocalizedString("deal.text.for.client", bundle: bundle, comment: "")
      }

      /// en translation: Force update
      ///
      /// Locales: en
      static func dealTextEditorForceUpdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.textEditor.force-update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.textEditor.force-update"
        }

        return NSLocalizedString("deal.textEditor.force-update", bundle: bundle, comment: "")
      }

      /// en translation: Free
      ///
      /// Locales: en
      static func changeAmountFeeFree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.fee-free", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.fee-free"
        }

        return NSLocalizedString("changeAmount.fee-free", bundle: bundle, comment: "")
      }

      /// en translation: Free
      ///
      /// Locales: en
      static func transactionSignFieldsFreeFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.free-fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.free-fee"
        }

        return NSLocalizedString("transactionSign.fields.free-fee", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en
      static func uploadFileButtonSelectGallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.button.select-gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.button.select-gallery"
        }

        return NSLocalizedString("uploadFile.button.select-gallery", bundle: bundle, comment: "")
      }

      /// en translation: If all the work is done as specified in the contract you can complete the contract, the contractor will receive payment. The checker will receive a commission for services.
      ///
      /// Locales: en
      static func dealDescriptionCommandFinishDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.description-command.finish-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.description-command.finish-deal"
        }

        return NSLocalizedString("deal.description-command.finish-deal", bundle: bundle, comment: "")
      }

      /// en translation: If you already backuped then press Continues
      ///
      /// Locales: en
      static func backupInformationTooltip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backupInformation.tooltip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backupInformation.tooltip"
        }

        return NSLocalizedString("backupInformation.tooltip", bundle: bundle, comment: "")
      }

      /// en translation: If you pay to some service or product
      ///
      /// Locales: en
      static func newDealSubtitleClient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newDeal.subtitle.client", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newDeal.subtitle.client"
        }

        return NSLocalizedString("newDeal.subtitle.client", bundle: bundle, comment: "")
      }

      /// en translation: If you provide service or sell goods
      ///
      /// Locales: en
      static func newDealSubtitleExecutor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newDeal.subtitle.executor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newDeal.subtitle.executor"
        }

        return NSLocalizedString("newDeal.subtitle.executor", bundle: bundle, comment: "")
      }

      /// en translation: Import
      ///
      /// Locales: en
      static func commonImport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.import", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.import"
        }

        return NSLocalizedString("common.import", bundle: bundle, comment: "")
      }

      /// en translation: Import exists
      ///
      /// Locales: en
      static func enterButtonImport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.button.import", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.button.import"
        }

        return NSLocalizedString("enter.button.import", bundle: bundle, comment: "")
      }

      /// en translation: In work
      ///
      /// Locales: en
      static func dealStatusWorking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.working", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.working"
        }

        return NSLocalizedString("deal.status.working", bundle: bundle, comment: "")
      }

      /// en translation: Loading...
      ///
      /// Locales: en
      static func transactionSignButtonsLoading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.buttons.loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.buttons.loading"
        }

        return NSLocalizedString("transactionSign.buttons.loading", bundle: bundle, comment: "")
      }

      /// en translation: New
      ///
      /// Locales: en
      static func dealStatusNew(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.new", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.new"
        }

        return NSLocalizedString("deal.status.new", bundle: bundle, comment: "")
      }

      /// en translation: New deal
      ///
      /// Locales: en
      static func mainTitleNewDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("main.title.new-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "main.title.new-deal"
        }

        return NSLocalizedString("main.title.new-deal", bundle: bundle, comment: "")
      }

      /// en translation: New deal
      ///
      /// Locales: en
      static func newDealTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newDeal.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newDeal.title"
        }

        return NSLocalizedString("newDeal.title", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func createWalletButtonNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createWallet.button.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createWallet.button.next"
        }

        return NSLocalizedString("createWallet.button.next", bundle: bundle, comment: "")
      }

      /// en translation: No secret key
      ///
      /// Locales: en
      static func dealNoSecretKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.no-secret-key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.no-secret-key"
        }

        return NSLocalizedString("deal.no-secret-key", bundle: bundle, comment: "")
      }

      /// en translation: Of transaction. Once signed by all parties, the client's funds will be locked in the smart-contract for the entire period of work.
      ///
      /// Locales: en
      static func transactionSignSubtitleUnsignedInitDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.subtitle.unsigned-init-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.subtitle.unsigned-init-deal"
        }

        return NSLocalizedString("transactionSign.subtitle.unsigned-init-deal", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func commonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.ok"
        }

        return NSLocalizedString("common.ok", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en
      static func commonOpen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.open"
        }

        return NSLocalizedString("common.open", bundle: bundle, comment: "")
      }

      /// en translation: Owner
      ///
      /// Locales: en
      static func commonOwner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.owner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.owner"
        }

        return NSLocalizedString("common.owner", bundle: bundle, comment: "")
      }

      /// en translation: Owner
      ///
      /// Locales: en
      static func dealTextOwner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.owner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.owner"
        }

        return NSLocalizedString("deal.text.owner", bundle: bundle, comment: "")
      }

      /// en translation: Partner
      ///
      /// Locales: en
      static func dealTextPartner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.partner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.partner"
        }

        return NSLocalizedString("deal.text.partner", bundle: bundle, comment: "")
      }

      /// en translation: Partner success added!
      ///
      /// Locales: en
      static func addContractorSuccessTitleContractor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addContractor.success-title.contractor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addContractor.success-title.contractor"
        }

        return NSLocalizedString("addContractor.success-title.contractor", bundle: bundle, comment: "")
      }

      /// en translation: Paste
      ///
      /// Locales: en
      static func commonPaste(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.paste", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.paste"
        }

        return NSLocalizedString("common.paste", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: en
      static func dealStatusPending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.pending"
        }

        return NSLocalizedString("deal.status.pending", bundle: bundle, comment: "")
      }

      /// en translation: Pending signature
      ///
      /// Locales: en
      static func transactionSignStatusesNeedSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.statuses.need-sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.statuses.need-sign"
        }

        return NSLocalizedString("transactionSign.statuses.need-sign", bundle: bundle, comment: "")
      }

      /// en translation: Performs the work specified in the contract.
      ///
      /// Locales: en
      static func dealHintAboutExecutor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.about-executor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.about-executor"
        }

        return NSLocalizedString("deal.hint.about-executor", bundle: bundle, comment: "")
      }

      /// en translation: Please select another account before deleting the active account. Or after deleting you log out. Delete account?
      ///
      /// Locales: en
      static func accountsDeleteAlertSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.alert.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.alert.subtitle"
        }

        return NSLocalizedString("accounts.delete.alert.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Private key
      ///
      /// Locales: en
      static func accountsBackupTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.backup.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.backup.title"
        }

        return NSLocalizedString("accounts.backup.title", bundle: bundle, comment: "")
      }

      /// en translation: Private key
      ///
      /// Locales: en
      static func accountsEditPrivateKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.edit.private.key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.edit.private.key"
        }

        return NSLocalizedString("accounts.edit.private.key", bundle: bundle, comment: "")
      }

      /// en translation: Private key already in clipboard!
      ///
      /// Locales: en
      static func backupInformationButtonCopied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backupInformation.button.copied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backupInformation.button.copied"
        }

        return NSLocalizedString("backupInformation.button.copied", bundle: bundle, comment: "")
      }

      /// en translation: Private key copied!
      ///
      /// Locales: en
      static func createWalletButtonCopied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createWallet.button.copied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createWallet.button.copied"
        }

        return NSLocalizedString("createWallet.button.copied", bundle: bundle, comment: "")
      }

      /// en translation: Processing
      ///
      /// Locales: en
      static func dealStatusProcessing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.status.processing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.status.processing"
        }

        return NSLocalizedString("deal.status.processing", bundle: bundle, comment: "")
      }

      /// en translation: Processing
      ///
      /// Locales: en
      static func transactionSignStatusesProcessing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.statuses.processing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.statuses.processing"
        }

        return NSLocalizedString("transactionSign.statuses.processing", bundle: bundle, comment: "")
      }

      /// en translation: Public key
      ///
      /// Locales: en
      static func commonPublicKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.public-key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.public-key"
        }

        return NSLocalizedString("common.public-key", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: en
      static func accountsEditRemove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.edit.remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.edit.remove"
        }

        return NSLocalizedString("accounts.edit.remove", bundle: bundle, comment: "")
      }

      /// en translation: Remove Account
      ///
      /// Locales: en
      static func accountsDeleteTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.title"
        }

        return NSLocalizedString("accounts.delete.title", bundle: bundle, comment: "")
      }

      /// en translation: Results
      ///
      /// Locales: en
      static func dealResultsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.results.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.results.title"
        }

        return NSLocalizedString("deal.results.title", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: en
      static func uploadFileButtonRetry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.button.retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.button.retry"
        }

        return NSLocalizedString("uploadFile.button.retry", bundle: bundle, comment: "")
      }

      /// en translation: SOL ➞ wSOL
      ///
      /// Locales: en
      static func transactionTypeWrapSol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.type.wrap-sol", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.type.wrap-sol"
        }

        return NSLocalizedString("transaction.type.wrap-sol", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func commonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.save"
        }

        return NSLocalizedString("common.save", bundle: bundle, comment: "")
      }

      /// en translation: Saved
      ///
      /// Locales: en
      static func uploadFileStateSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.state.saved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.saved"
        }

        return NSLocalizedString("uploadFile.state.saved", bundle: bundle, comment: "")
      }

      /// en translation: Saving...
      ///
      /// Locales: en
      static func uploadFileStateSaving(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.state.saving", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.saving"
        }

        return NSLocalizedString("uploadFile.state.saving", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en
      static func uploadFileButtonSelect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.button.select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.button.select"
        }

        return NSLocalizedString("uploadFile.button.select", bundle: bundle, comment: "")
      }

      /// en translation: Select action
      ///
      /// Locales: en
      static func commonSelectAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.select-action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.select-action"
        }

        return NSLocalizedString("common.select-action", bundle: bundle, comment: "")
      }

      /// en translation: Select file
      ///
      /// Locales: en
      static func uploadFileButtonImportFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.button.import-file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.button.import-file"
        }

        return NSLocalizedString("uploadFile.button.import-file", bundle: bundle, comment: "")
      }

      /// en translation: Send it securely via Telegram Secret Chat or Signal to your partner or allow scan from your phone.
      ///
      /// Locales: en
      static func qrCodeWarningMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.warning.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.warning.message"
        }

        return NSLocalizedString("qrCode.warning.message", bundle: bundle, comment: "")
      }

      /// en translation: Service Fee
      ///
      /// Locales: en
      static func transactionSignFieldsServiceFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.service-fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.service-fee"
        }

        return NSLocalizedString("transactionSign.fields.service-fee", bundle: bundle, comment: "")
      }

      /// en translation: Service fee
      ///
      /// Locales: en
      static func changeAmountFeeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.fee-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.fee-title"
        }

        return NSLocalizedString("changeAmount.fee-title", bundle: bundle, comment: "")
      }

      /// en translation: Set
      ///
      /// Locales: en
      static func commonSet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.set", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.set"
        }

        return NSLocalizedString("common.set", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en
      static func commonShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.share"
        }

        return NSLocalizedString("common.share", bundle: bundle, comment: "")
      }

      /// en translation: Share Image
      ///
      /// Locales: en
      static func qrCodeButtonShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.button.share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.button.share"
        }

        return NSLocalizedString("qrCode.button.share", bundle: bundle, comment: "")
      }

      /// en translation: Sign
      ///
      /// Locales: en
      static func dealButtonsSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.buttons.sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.buttons.sign"
        }

        return NSLocalizedString("deal.buttons.sign", bundle: bundle, comment: "")
      }

      /// en translation: Sign and start
      ///
      /// Locales: en
      static func dealButtonsSignAndStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.buttons.sign-and-start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.buttons.sign-and-start"
        }

        return NSLocalizedString("deal.buttons.sign-and-start", bundle: bundle, comment: "")
      }

      /// en translation: Sign the contract, the work of the contract starts automatically when your partner signs it
      ///
      /// Locales: en
      static func dealDescriptionCommandFirstSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.description-command.first-sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.description-command.first-sign"
        }

        return NSLocalizedString("deal.description-command.first-sign", bundle: bundle, comment: "")
      }

      /// en translation: Signature
      ///
      /// Locales: en
      static func transactionSignFieldsSignature(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.signature", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.signature"
        }

        return NSLocalizedString("transactionSign.fields.signature", bundle: bundle, comment: "")
      }

      /// en translation: Signed
      ///
      /// Locales: en
      static func transactionSignButtonsSigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.buttons.signed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.buttons.signed"
        }

        return NSLocalizedString("transactionSign.buttons.signed", bundle: bundle, comment: "")
      }

      /// en translation: Signed
      ///
      /// Locales: en
      static func transactionSignTitleSigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.title.signed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.title.signed"
        }

        return NSLocalizedString("transactionSign.title.signed", bundle: bundle, comment: "")
      }

      /// en translation: Signing  the transaction
      ///
      /// Locales: en
      static func transactionSignTitleNeedSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.title.need-sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.title.need-sign"
        }

        return NSLocalizedString("transactionSign.title.need-sign", bundle: bundle, comment: "")
      }

      /// en translation: Signing...
      ///
      /// Locales: en
      static func transactionSignButtonsSigning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.buttons.signing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.buttons.signing"
        }

        return NSLocalizedString("transactionSign.buttons.signing", bundle: bundle, comment: "")
      }

      /// en translation: Start deal
      ///
      /// Locales: en
      static func transactionTypeInitDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.type.init-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.type.init-deal"
        }

        return NSLocalizedString("transaction.type.init-deal", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en
      static func transactionSignFieldsStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.status"
        }

        return NSLocalizedString("transactionSign.fields.status", bundle: bundle, comment: "")
      }

      /// en translation: Stop deal
      ///
      /// Locales: en
      static func dealButtonsStopDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.buttons.stop-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.buttons.stop-deal"
        }

        return NSLocalizedString("deal.buttons.stop-deal", bundle: bundle, comment: "")
      }

      /// en translation: Success upload
      ///
      /// Locales: en
      static func uploadFileStateSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.state.success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.success"
        }

        return NSLocalizedString("uploadFile.state.success", bundle: bundle, comment: "")
      }

      /// en translation: Text
      ///
      /// Locales: en
      static func dealTextText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.text"
        }

        return NSLocalizedString("deal.text.text", bundle: bundle, comment: "")
      }

      /// en translation: The account that pays you for the work you do
      ///
      /// Locales: en
      static func dealHintPayAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.pay-account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.pay-account"
        }

        return NSLocalizedString("deal.hint.pay-account", bundle: bundle, comment: "")
      }

      /// en translation: The contract description was updated while you were editing your version. Forced update to your version?
      ///
      /// Locales: en
      static func dealTextEditorMessageForceUpdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.textEditor.message-force-update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.textEditor.message-force-update"
        }

        return NSLocalizedString("deal.textEditor.message-force-update", bundle: bundle, comment: "")
      }

      /// en translation: The description of the contract is empty
      ///
      /// Locales: en
      static func dealTextEditorViewPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.textEditor.view-placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.textEditor.view-placeholder"
        }

        return NSLocalizedString("deal.textEditor.view-placeholder", bundle: bundle, comment: "")
      }

      /// en translation: The fee is calculated from the amount of the transaction and the cost of the verification service of result
      ///
      /// Locales: en
      static func changeAmountFeeCalculateDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.fee-calculate-description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.fee-calculate-description"
        }

        return NSLocalizedString("changeAmount.fee-calculate-description", bundle: bundle, comment: "")
      }

      /// en translation: The fee is taken after the contract is signed by all parties and the start of the contract.
      ///
      /// Locales: en
      static func changeAmountFeeDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.fee-description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.fee-description"
        }

        return NSLocalizedString("changeAmount.fee-description", bundle: bundle, comment: "")
      }

      /// en translation: The file is large. Encryption may take a few minutes
      ///
      /// Locales: en
      static func uploadFileLargeFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.large-file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.large-file"
        }

        return NSLocalizedString("uploadFile.large-file", bundle: bundle, comment: "")
      }

      /// en translation: The partner has already signed the contract. The work of the contract will begin when you sign the contract.
      ///
      /// Locales: en
      static func dealDescriptionCommandPartnerAlreadySigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.description-command.partner-already-signed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.description-command.partner-already-signed"
        }

        return NSLocalizedString("deal.description-command.partner-already-signed", bundle: bundle, comment: "")
      }

      /// en translation: The partner need scan the QR code to start working on the contract.
      ///
      /// Locales: en
      static func shareContentSubtitleSecretKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shareContent.subtitle.secret-key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shareContent.subtitle.secret-key"
        }

        return NSLocalizedString("shareContent.subtitle.secret-key", bundle: bundle, comment: "")
      }

      /// en translation: The secret key
      ///
      /// Locales: en
      static func shareContentTitleSecretKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shareContent.title.secret-key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shareContent.title.secret-key"
        }

        return NSLocalizedString("shareContent.title.secret-key", bundle: bundle, comment: "")
      }

      /// en translation: The secret key is needed to view and decrypt/encrypt contract details.
      ///
      /// Locales: en
      static func dealNoSecretKeyInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.no-secret-key-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.no-secret-key-information"
        }

        return NSLocalizedString("deal.no-secret-key-information", bundle: bundle, comment: "")
      }

      /// en translation: The transaction will soon be completed
      ///
      /// Locales: en
      static func transactionSignSubtitleProcessing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.subtitle.processing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.subtitle.processing"
        }

        return NSLocalizedString("transactionSign.subtitle.processing", bundle: bundle, comment: "")
      }

      /// en translation: This files will be encrypted and available for viewing only to contract partners.
      ///
      /// Locales: en
      static func dealHintEncryptFiles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.encrypt-files", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.encrypt-files"
        }

        return NSLocalizedString("deal.hint.encrypt-files", bundle: bundle, comment: "")
      }

      /// en translation: This key use for work with service. Please, backup private key to secure store.
      ///
      /// Locales: en
      static func createWalletSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createWallet.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createWallet.subtitle"
        }

        return NSLocalizedString("createWallet.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: This text will be encrypted and available for viewing only to contract partners.
      ///
      /// Locales: en
      static func dealHintEncryptContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.encrypt-content", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.encrypt-content"
        }

        return NSLocalizedString("deal.hint.encrypt-content", bundle: bundle, comment: "")
      }

      /// en translation: Total amount
      ///
      /// Locales: en
      static func changeAmountTotalAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changeAmount.total-amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changeAmount.total-amount"
        }

        return NSLocalizedString("changeAmount.total-amount", bundle: bundle, comment: "")
      }

      /// en translation: Transaction
      ///
      /// Locales: en
      static func transactionSignFieldsTx(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.tx", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.tx"
        }

        return NSLocalizedString("transactionSign.fields.tx", bundle: bundle, comment: "")
      }

      /// en translation: Type
      ///
      /// Locales: en
      static func transactionSignFieldsType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.type"
        }

        return NSLocalizedString("transactionSign.fields.type", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en
      static func commonUpdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.update"
        }

        return NSLocalizedString("common.update", bundle: bundle, comment: "")
      }

      /// en translation: Upload error
      ///
      /// Locales: en
      static func uploadFileStateError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadFile.state.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.error"
        }

        return NSLocalizedString("uploadFile.state.error", bundle: bundle, comment: "")
      }

      /// en translation: Uploading - %@
      ///
      /// Locales: en
      static func uploadFileStateUploading(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("uploadFile.state.uploading", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uploadFile.state.uploading"
        }

        let format = NSLocalizedString("uploadFile.state.uploading", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Verifier
      ///
      /// Locales: en
      static func dealTextVerifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.text.verifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.text.verifier"
        }

        return NSLocalizedString("deal.text.verifier", bundle: bundle, comment: "")
      }

      /// en translation: Verifier Fee
      ///
      /// Locales: en
      static func transactionSignFieldsVerifierFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactionSign.fields.verifier-fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactionSign.fields.verifier-fee"
        }

        return NSLocalizedString("transactionSign.fields.verifier-fee", bundle: bundle, comment: "")
      }

      /// en translation: Very important!
      ///
      /// Locales: en
      static func backupInformationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backupInformation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "backupInformation.title"
        }

        return NSLocalizedString("backupInformation.title", bundle: bundle, comment: "")
      }

      /// en translation: View
      ///
      /// Locales: en
      static func commonView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.view"
        }

        return NSLocalizedString("common.view", bundle: bundle, comment: "")
      }

      /// en translation: View
      ///
      /// Locales: en
      static func dealTextEditorModeViewer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.textEditor.mode.viewer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.textEditor.mode.viewer"
        }

        return NSLocalizedString("deal.textEditor.mode.viewer", bundle: bundle, comment: "")
      }

      /// en translation: Waiting approve
      ///
      /// Locales: en
      static func dealResultsWaitingApprove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.results.waiting-approve", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.results.waiting-approve"
        }

        return NSLocalizedString("deal.results.waiting-approve", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en
      static func accountsDeleteAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.alert.title"
        }

        return NSLocalizedString("accounts.delete.alert.title", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en
      static func commonWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.warning"
        }

        return NSLocalizedString("common.warning", bundle: bundle, comment: "")
      }

      /// en translation: Warning!
      ///
      /// Locales: en
      static func accountsWarningTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.warning.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.warning.title"
        }

        return NSLocalizedString("accounts.warning.title", bundle: bundle, comment: "")
      }

      /// en translation: Warning!
      ///
      /// Locales: en
      static func qrCodeWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrCode.warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "qrCode.warning"
        }

        return NSLocalizedString("qrCode.warning", bundle: bundle, comment: "")
      }

      /// en translation: Yes, delete
      ///
      /// Locales: en
      static func accountsDeleteAlertButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.alert.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.alert.button"
        }

        return NSLocalizedString("accounts.delete.alert.button", bundle: bundle, comment: "")
      }

      /// en translation: You
      ///
      /// Locales: en
      static func commonYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.you", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.you"
        }

        return NSLocalizedString("common.you", bundle: bundle, comment: "")
      }

      /// en translation: You can cancel your signature before your partner signs the contract. The work of the contract will begin when the partner signs.
      ///
      /// Locales: en
      static func dealDescriptionCommandCancelSign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.description-command.cancel-sign", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.description-command.cancel-sign"
        }

        return NSLocalizedString("deal.description-command.cancel-sign", bundle: bundle, comment: "")
      }

      /// en translation: You can stop the contract all funds will be refunded.
      ///
      /// Locales: en
      static func dealDescriptionCommandStopDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.description-command.stop-deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.description-command.stop-deal"
        }

        return NSLocalizedString("deal.description-command.stop-deal", bundle: bundle, comment: "")
      }

      /// en translation: You cannot recover access to the account without the private key.
      ///
      /// Locales: en
      static func accountsDeleteWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accounts.delete.warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "accounts.delete.warning"
        }

        return NSLocalizedString("accounts.delete.warning", bundle: bundle, comment: "")
      }

      /// en translation: You need to specify the Account that will check the result of the contract.
      ///
      /// Locales: en
      static func dealHintEmptyVerifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.hint.empty-verifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.hint.empty-verifier"
        }

        return NSLocalizedString("deal.hint.empty-verifier", bundle: bundle, comment: "")
      }

      /// en translation: Your private key
      ///
      /// Locales: en
      static func createWalletTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createWallet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "createWallet.title"
        }

        return NSLocalizedString("createWallet.title", bundle: bundle, comment: "")
      }

      /// en translation: [No file name]
      ///
      /// Locales: en
      static func dealFileNoName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deal.file.no-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deal.file.no-name"
        }

        return NSLocalizedString("deal.file.no-name", bundle: bundle, comment: "")
      }

      /// en translation: wSOL ➞ SOL
      ///
      /// Locales: en
      static func transactionTypeUnwrapWsol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction.type.unwrap-wsol", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction.type.unwrap-wsol"
        }

        return NSLocalizedString("transaction.type.unwrap-wsol", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
